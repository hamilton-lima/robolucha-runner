/*
 * Robolucha API
 * Robolucha API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ModelActiveMatch;
import io.swagger.client.model.ModelClassroom;
import io.swagger.client.model.ModelConfig;
import io.swagger.client.model.ModelFindLuchadorWithGamedefinition;
import io.swagger.client.model.ModelGameComponent;
import io.swagger.client.model.ModelGameDefinition;
import io.swagger.client.model.ModelJoinMatch;
import io.swagger.client.model.ModelMatch;
import io.swagger.client.model.ModelMatchMetric;
import io.swagger.client.model.ModelMatchParticipant;
import io.swagger.client.model.ModelMatchScore;
import io.swagger.client.model.ModelScoreList;
import io.swagger.client.model.ModelUpdateLuchadorResponse;
import io.swagger.client.model.ModelUser;
import io.swagger.client.model.ModelUserSetting;
import java.util.List;
import org.junit.Ignore;
import org.junit.Test;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * saves a match score
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalAddMatchScoresPostTest() throws ApiException {
        ModelScoreList body = null;
        ModelMatchScore response = api.internalAddMatchScoresPost(body);

        // TODO: test validations
    }
    /**
     * ends existing match
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalEndMatchPutTest() throws ApiException {
        ModelMatch body = null;
        ModelMatch response = api.internalEndMatchPut(body);

        // TODO: test validations
    }
    /**
     * Create Gamecomponent as Luchador
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalGameComponentPostTest() throws ApiException {
        ModelGameComponent body = null;
        ModelGameComponent response = api.internalGameComponentPost(body);

        // TODO: test validations
    }
    /**
     * find a game definition
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalGameDefinitionIdIdGetTest() throws ApiException {
        Integer id = null;
        ModelGameDefinition response = api.internalGameDefinitionIdIdGet(id);

        // TODO: test validations
    }
    /**
     * find a game definition
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalGameDefinitionNameGetTest() throws ApiException {
        String name = null;
        ModelGameDefinition response = api.internalGameDefinitionNameGet(name);

        // TODO: test validations
    }
    /**
     * create Game definition
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalGameDefinitionPostTest() throws ApiException {
        ModelGameDefinition body = null;
        ModelGameDefinition response = api.internalGameDefinitionPost(body);

        // TODO: test validations
    }
    /**
     * update Game definition
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalGameDefinitionPutTest() throws ApiException {
        ModelGameDefinition body = null;
        ModelGameDefinition response = api.internalGameDefinitionPut(body);

        // TODO: test validations
    }
    /**
     * join a classroom
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalJoinClassroomAccessCodePostTest() throws ApiException {
        String accessCode = null;
        ModelClassroom response = api.internalJoinClassroomAccessCodePost(accessCode);

        // TODO: test validations
    }
    /**
     * find Luchador by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalLuchadorPostTest() throws ApiException {
        ModelFindLuchadorWithGamedefinition body = null;
        ModelGameComponent response = api.internalLuchadorPost(body);

        // TODO: test validations
    }
    /**
     * saves a match metric
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalMatchMetricPostTest() throws ApiException {
        ModelMatchMetric body = null;
        String response = api.internalMatchMetricPost(body);

        // TODO: test validations
    }
    /**
     * Adds luchador to a match
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalMatchParticipantPostTest() throws ApiException {
        ModelMatchParticipant body = null;
        ModelMatchParticipant response = api.internalMatchParticipantPost(body);

        // TODO: test validations
    }
    /**
     * find one match
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalMatchSingleGetTest() throws ApiException {
        Integer matchID = null;
        ModelMatch response = api.internalMatchSingleGet(matchID);

        // TODO: test validations
    }
    /**
     * returns application health check information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalReadyGetTest() throws ApiException {
        api.internalReadyGet();

        // TODO: test validations
    }
    /**
     * create Match
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void internalStartMatchNamePostTest() throws ApiException {
        String name = null;
        ModelMatch response = api.internalStartMatchNamePost(name);

        // TODO: test validations
    }
    /**
     * find all Classroom
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateClassroomGetTest() throws ApiException {
        List<ModelClassroom> response = api.privateClassroomGet();

        // TODO: test validations
    }
    /**
     * add a Classroom
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateClassroomPostTest() throws ApiException {
        ModelClassroom body = null;
        ModelClassroom response = api.privateClassroomPost(body);

        // TODO: test validations
    }
    /**
     * find all game definitions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateGameDefinitionAllGetTest() throws ApiException {
        List<ModelGameDefinition> response = api.privateGameDefinitionAllGet();

        // TODO: test validations
    }
    /**
     * find a game definition
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateGameDefinitionIdIdGetTest() throws ApiException {
        Integer id = null;
        ModelGameDefinition response = api.privateGameDefinitionIdIdGet(id);

        // TODO: test validations
    }
    /**
     * find The current user information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateGetUserGetTest() throws ApiException {
        ModelUser response = api.privateGetUserGet();

        // TODO: test validations
    }
    /**
     * Sends message with the request to join the match
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateJoinMatchPostTest() throws ApiException {
        ModelJoinMatch body = null;
        ModelMatch response = api.privateJoinMatchPost(body);

        // TODO: test validations
    }
    /**
     * find or create Luchador for the current user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateLuchadorGetTest() throws ApiException {
        ModelGameComponent response = api.privateLuchadorGet();

        // TODO: test validations
    }
    /**
     * Updates Luchador
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateLuchadorPutTest() throws ApiException {
        ModelGameComponent body = null;
        ModelUpdateLuchadorResponse response = api.privateLuchadorPut(body);

        // TODO: test validations
    }
    /**
     * find maskConfig for a luchador
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateMaskConfigIdGetTest() throws ApiException {
        Integer id = null;
        List<ModelConfig> response = api.privateMaskConfigIdGet(id);

        // TODO: test validations
    }
    /**
     * create random maskConfig
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateMaskRandomGetTest() throws ApiException {
        List<ModelConfig> response = api.privateMaskRandomGet();

        // TODO: test validations
    }
    /**
     * return luchador configs for current match
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateMatchConfigGetTest() throws ApiException {
        Integer matchID = null;
        List<ModelGameComponent> response = api.privateMatchConfigGet(matchID);

        // TODO: test validations
    }
    /**
     * find active matches
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateMatchGetTest() throws ApiException {
        List<ModelActiveMatch> response = api.privateMatchGet();

        // TODO: test validations
    }
    /**
     * find one match
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateMatchSingleGetTest() throws ApiException {
        Integer matchID = null;
        ModelMatch response = api.privateMatchSingleGet(matchID);

        // TODO: test validations
    }
    /**
     * create Match and publish
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateStartTutorialMatchNamePostTest() throws ApiException {
        String name = null;
        ModelJoinMatch response = api.privateStartTutorialMatchNamePost(name);

        // TODO: test validations
    }
    /**
     * find tutorial GameDefinition
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateTutorialGetTest() throws ApiException {
        List<ModelGameDefinition> response = api.privateTutorialGet();

        // TODO: test validations
    }
    /**
     * find current user userSetting
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateUserSettingGetTest() throws ApiException {
        ModelUserSetting response = api.privateUserSettingGet();

        // TODO: test validations
    }
    /**
     * Updates user userSetting
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void privateUserSettingPutTest() throws ApiException {
        ModelUserSetting body = null;
        ModelUserSetting response = api.privateUserSettingPut(body);

        // TODO: test validations
    }
}
