/*
 * Robolucha API
 * Robolucha API
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * MainMatch
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-05-25T12:53:46.102Z[GMT]")public class MainMatch {

  @SerializedName("gameDefinitionID")
  private Integer gameDefinitionID = null;

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("lastTimeAlive")
  private String lastTimeAlive = null;

  @SerializedName("participants")
  private List<MainLuchador> participants = null;

  @SerializedName("timeEnd")
  private String timeEnd = null;

  @SerializedName("timeStart")
  private String timeStart = null;
  public MainMatch gameDefinitionID(Integer gameDefinitionID) {
    this.gameDefinitionID = gameDefinitionID;
    return this;
  }

  

  /**
  * Get gameDefinitionID
  * @return gameDefinitionID
  **/
  @Schema(description = "")
  public Integer getGameDefinitionID() {
    return gameDefinitionID;
  }
  public void setGameDefinitionID(Integer gameDefinitionID) {
    this.gameDefinitionID = gameDefinitionID;
  }
  public MainMatch id(Integer id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public void setId(Integer id) {
    this.id = id;
  }
  public MainMatch lastTimeAlive(String lastTimeAlive) {
    this.lastTimeAlive = lastTimeAlive;
    return this;
  }

  

  /**
  * Get lastTimeAlive
  * @return lastTimeAlive
  **/
  @Schema(description = "")
  public String getLastTimeAlive() {
    return lastTimeAlive;
  }
  public void setLastTimeAlive(String lastTimeAlive) {
    this.lastTimeAlive = lastTimeAlive;
  }
  public MainMatch participants(List<MainLuchador> participants) {
    this.participants = participants;
    return this;
  }

  public MainMatch addParticipantsItem(MainLuchador participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<MainLuchador>();
    }
    this.participants.add(participantsItem);
    return this;
  }

  /**
  * Get participants
  * @return participants
  **/
  @Schema(description = "")
  public List<MainLuchador> getParticipants() {
    return participants;
  }
  public void setParticipants(List<MainLuchador> participants) {
    this.participants = participants;
  }
  public MainMatch timeEnd(String timeEnd) {
    this.timeEnd = timeEnd;
    return this;
  }

  

  /**
  * Get timeEnd
  * @return timeEnd
  **/
  @Schema(description = "")
  public String getTimeEnd() {
    return timeEnd;
  }
  public void setTimeEnd(String timeEnd) {
    this.timeEnd = timeEnd;
  }
  public MainMatch timeStart(String timeStart) {
    this.timeStart = timeStart;
    return this;
  }

  

  /**
  * Get timeStart
  * @return timeStart
  **/
  @Schema(description = "")
  public String getTimeStart() {
    return timeStart;
  }
  public void setTimeStart(String timeStart) {
    this.timeStart = timeStart;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MainMatch mainMatch = (MainMatch) o;
    return Objects.equals(this.gameDefinitionID, mainMatch.gameDefinitionID) &&
        Objects.equals(this.id, mainMatch.id) &&
        Objects.equals(this.lastTimeAlive, mainMatch.lastTimeAlive) &&
        Objects.equals(this.participants, mainMatch.participants) &&
        Objects.equals(this.timeEnd, mainMatch.timeEnd) &&
        Objects.equals(this.timeStart, mainMatch.timeStart);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(gameDefinitionID, id, lastTimeAlive, participants, timeEnd, timeStart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MainMatch {\n");
    
    sb.append("    gameDefinitionID: ").append(toIndentedString(gameDefinitionID)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastTimeAlive: ").append(toIndentedString(lastTimeAlive)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    timeEnd: ").append(toIndentedString(timeEnd)).append("\n");
    sb.append("    timeStart: ").append(toIndentedString(timeStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
